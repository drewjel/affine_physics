-----------------------------------------------
Using LLVM_SRC_PATH = /llvm
Using LLVM_BUILD_PATH = /llvm/build
Using LLVM_BIN_PATH = /llvm/build/bin
-----------------------------------------------
g++ -O0 -g -Wall `/llvm/build/bin/llvm-config --cxxflags` -I/llvm/tools/clang/include -I/llvm/build/tools/clang/include ASTToCoords.cpp AST.cpp Interpretation.cpp Oracle.cpp Checker.cpp CoordsToDomain.cpp main.cpp Domain.cpp \
	-Wl,--start-group -lclangAST -lclangASTMatchers -lclangAnalysis -lclangBasic -lclangDriver -lclangEdit -lclangFrontend -lclangFrontendTool -lclangLex -lclangParse -lclangSema -lclangEdit -lclangRewrite -lclangRewriteFrontend -lclangStaticAnalyzerFrontend -lclangStaticAnalyzerCheckers -lclangStaticAnalyzerCore -lclangCrossTU -lclangIndex -lclangSerialization -lclangToolingCore -lclangTooling -lclangFormat -Wl,--end-group `/llvm/build/bin/llvm-config --ldflags --libs --system-libs` -o ../build/ASTMatcher
In file included from ASTToCoords.h:6:0,
                 from ASTToCoords.cpp:1:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
In file included from Interpretation.h:6:0,
                 from Interpretation.cpp:1:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
Interpretation.cpp: In member function 'void interp::Interpretation::mkVecVarExpr(ast::VecVarExpr*, clang::ASTContext*)':
Interpretation.cpp:66:5: error 'Space' was not declared in this scope
     Space& space = oracle_->getSpaceForVecVarExpr(ast);
     ^~~~~
Interpretation.cpp:66:5: note: suggested alternative:
In file included from Oracle.h:7:0,
                 from Interpretation.h:8,
                 from Interpretation.cpp:1:
Domain.h:18:7: note:   'domain::Space'
 class Space {
       ^~~~~
Interpretation.cpp:66:12: error: 'space' was not declared in this scope
     Space& space = oracle_->getSpaceForVecVarExpr(ast);
            ^~~~~
Interpretation.cpp:66:12: note: suggested alternative: 'isspace'
     Space& space = oracle_->getSpaceForVecVarExpr(ast);
            ^~~~~
            isspace
Interpretation.cpp:66:29: error: 'class oracle::Oracle' has no member named 'getSpaceForVecVarExpr'; did you mean 'getSpaceForVecVarExp'?
     Space& space = oracle_->getSpaceForVecVarExpr(ast);
                             ^~~~~~~~~~~~~~~~~~~~~
                             getSpaceForVecVarExp
Interpretation.cpp:67:13: error: 'VecVar' is not a member of 'domain'
     domain::VecVar *dom_var = domain_->addVecVarExpr(space, dom_var);
             ^~~~~~
Interpretation.cpp:67:13: note: suggested alternative: 'Vector'
     domain::VecVar *dom_var = domain_->addVecVarExpr(space, dom_var);
             ^~~~~~
             Vector
Interpretation.cpp:67:21: error: 'dom_var' was not declared in this scope
     domain::VecVar *dom_var = domain_->addVecVarExpr(space, dom_var);
                     ^~~~~~~
Interpretation.cpp: In member function 'void interp::Interpretation::mkVector(ast::Vector*, clang::ASTContext*)':
Interpretation.cpp:142:36: error: 'var_coords' was not declared in this scope
     ast2coords_->overrideExpr(ast, var_coords);             // TODO: Expr needed?
                                    ^~~~~~~~~~
Interpretation.cpp:142:36: note: suggested alternative: 'vec_coords'
     ast2coords_->overrideExpr(ast, var_coords);             // TODO: Expr needed?
                                    ^~~~~~~~~~
                                    vec_coords
Interpretation.cpp:143:5: error: 'Space' was not declared in this scope
     Space &s = oracle_->getSpaceForVector(ast);
     ^~~~~
Interpretation.cpp:143:5: note: suggested alternative:
In file included from Oracle.h:7:0,
                 from Interpretation.h:8,
                 from Interpretation.cpp:1:
Domain.h:18:7: note:   'domain::Space'
 class Space {
       ^~~~~
Interpretation.cpp:143:12: error: 's' was not declared in this scope
     Space &s = oracle_->getSpaceForVector(ast);
            ^
Interpretation.cpp:143:46: error: no matching function for call to 'oracle::Oracle::getSpaceForVector(ast::Vector*&)'
     Space &s = oracle_->getSpaceForVector(ast);
                                              ^
In file included from Interpretation.h:8:0,
                 from Interpretation.cpp:1:
Oracle.h:20:17: note: candidate: domain::Space& oracle::Oracle::getSpaceForVector(std::__cxx11::string)
  domain::Space& getSpaceForVector(std::string where);
                 ^~~~~~~~~~~~~~~~~
Oracle.h:20:17: note:   no known conversion for argument 1 from 'ast::Vector* {aka const clang::CXXConstructExpr*}' to 'std::__cxx11::string {aka std::__cxx11::basic_string<char>}'
Interpretation.cpp:145:50: error: 'space' was not declared in this scope
     domain::Vector* dom_vec = domain_->addVector(space, vec_coords);
                                                  ^~~~~
Interpretation.cpp:145:50: note: suggested alternative: 'isspace'
     domain::Vector* dom_vec = domain_->addVector(space, vec_coords);
                                                  ^~~~~
                                                  isspace
Interpretation.cpp:146:18: error: 'class coords2domain::CoordsToDomain' has no member named 'putVectorInterp'; did you mean 'putVecDef'?
     coords2dom_->putVectorInterp(vec_coords, dom_vec);
                  ^~~~~~~~~~~~~~~
                  putVecDef
Interpretation.cpp: In member function 'const coords::VecExpr* interp::Interpretation::getCoords(ast::VecExpr*)':
Interpretation.cpp:163:25: error: 'class ast2coords::ASTToCoords' has no member named 'getCoords'; did you mean 'ASTToCoords'?
     return ast2coords_->getCoords(expr);
                         ^~~~~~~~~
                         ASTToCoords
In file included from Oracle.h:6:0,
                 from Oracle.cpp:4:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
In file included from Domain.h:9:0,
                 from Checker.h:4,
                 from Checker.cpp:9:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
In file included from CoordsToDomain.h:5:0,
                 from CoordsToDomain.cpp:1:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
In file included from Interpretation.h:6:0,
                 from main.cpp:15:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
main.cpp: In function 'const domain::VecExpr* handleMemberCallExpr(const clang::CXXMemberCallExpr*, clang::ASTContext*, clang::SourceManager&)':
main.cpp:89:49: error: invalid conversion from 'const domain::VecExpr*' to 'domain::VecExpr*' [-fpermissive]
   interp_.mkVecVecAddExpr(ast, left_br, right_br);
                                                 ^
In file included from main.cpp:15:0:
Interpretation.h:26:10: note:   initializing argument 2 of 'void interp::Interpretation::mkVecVecAddExpr(ast::VecVecAddExpr*, domain::VecExpr*, domain::VecExpr*)'
     void mkVecVecAddExpr(ast::VecVecAddExpr *ast, domain::VecExpr *mem, domain::VecExpr *arg);
          ^~~~~~~~~~~~~~~
main.cpp:89:49: error: invalid conversion from 'const domain::VecExpr*' to 'domain::VecExpr*' [-fpermissive]
   interp_.mkVecVecAddExpr(ast, left_br, right_br);
                                                 ^
In file included from main.cpp:15:0:
Interpretation.h:26:10: note:   initializing argument 3 of 'void interp::Interpretation::mkVecVecAddExpr(ast::VecVecAddExpr*, domain::VecExpr*, domain::VecExpr*)'
     void mkVecVecAddExpr(ast::VecVecAddExpr *ast, domain::VecExpr *mem, domain::VecExpr *arg);
          ^~~~~~~~~~~~~~~
main.cpp: In member function 'virtual void HandlerForCXXMemberCallExprRight_DeclRefExpr::run(const clang::ast_matchers::MatchFinder::MatchResult&)':
main.cpp:106:12: error: base operand of '->' has non-pointer type 'interp::Interpretation'
     interp_->mkVecVarExpr(declRefExpr);
            ^~
main.cpp: In member function 'virtual void HandlerForCXXConstructAddExpr::run(const clang::ast_matchers::MatchFinder::MatchResult&)':
main.cpp:163:9: error: 'vec_vec_add_ctor_ast' was not declared in this scope
     if (vec_vec_add_ctor_ast == NULL)
         ^~~~~~~~~~~~~~~~~~~~
main.cpp:163:9: note: suggested alternative: 'vec_vec_add_member_call_ast'
     if (vec_vec_add_ctor_ast == NULL)
         ^~~~~~~~~~~~~~~~~~~~
         vec_vec_add_member_call_ast
main.cpp:179:81: error: no matching function for call to 'interp::Interpretation::mkVector(const clang::CXXMemberCallExpr*&, const domain::VecExpr*&, clang::ASTContext*&)'
     return interp_.mkVector(vec_vec_add_member_call_ast, memberCallExpr, context);
                                                                                 ^
In file included from main.cpp:15:0:
Interpretation.h:23:10: note: candidate: void interp::Interpretation::mkVector(ast::Vector*, clang::ASTContext*)
     void mkVector(ast::Vector* ast, clang::ASTContext *context);
          ^~~~~~~~
Interpretation.h:23:10: note:   candidate expects 2 arguments, 3 provided
main.cpp:179:81: error: return-statement with a value, in function returning 'void' [-fpermissive]
     return interp_.mkVector(vec_vec_add_member_call_ast, memberCallExpr, context);
                                                                                 ^
main.cpp: In function 'const domain::VecExpr* handle_arg0_of_add_call(const clang::Expr*, clang::ASTContext&, clang::SourceManager&)':
main.cpp:237:17: error: base operand of '->' has non-pointer type 'interp::Interpretation'
   return interp_->getVecExpr(arg);
                 ^~
main.cpp: In member function 'void CXXMemberCallExprMemberExprMatcher::match(const clang::Expr&, clang::ASTContext&)':
main.cpp:276:7: error: expected ';' before 'call_rhs'
       call_rhs.dump();
       ^~~~~~~~
main.cpp: In function 'domain::VecExpr* handle_member_expr_of_add_call(const clang::Expr*, clang::ASTContext&, clang::SourceManager&)':
main.cpp:293:18: error: ambiguating new declaration of 'domain::VecExpr* handle_member_expr_of_add_call(const clang::Expr*, clang::ASTContext&, clang::SourceManager&)'
 domain::VecExpr *handle_member_expr_of_add_call(const clang::Expr *memexpr, ASTContext &context, SourceManager &sm)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
main.cpp:65:24: note: old declaration 'const domain::VecExpr* handle_member_expr_of_add_call(const clang::Expr*, clang::ASTContext&, clang::SourceManager&)'
 const domain::VecExpr *handle_member_expr_of_add_call(const clang::Expr *left, ASTContext &context, SourceManager &sm);
                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
main.cpp:318:34: error: base operand of '->' has non-pointer type 'interp::Interpretation'
   domain::VecExpr *expr = interp_->getVecExpr(memexpr);
                                  ^~
main.cpp: At global scope:
main.cpp:407:48: error: 'clang' is a namespace
 const domain::VecExpr *handleCXXDeclStmt(const clang:: *consdecl, ASTContext *context, SourceManager &sm)
                                                ^~~~~
main.cpp:407:57: error: ISO C++ forbids declaration of 'consdecl' with no type [-fpermissive]
 const domain::VecExpr *handleCXXDeclStmt(const clang:: *consdecl, ASTContext *context, SourceManager &sm)
                                                         ^~~~~~~~
main.cpp: In function 'const domain::VecExpr* handleCXXDeclStmt(const int*, clang::ASTContext*, clang::SourceManager&)':
main.cpp:411:34: error: no matching function for call to 'CXXConstructExprMatcher::match(const int*&, clang::ASTContext*&)'
   matcher.match(consdecl, context);
                                  ^
main.cpp:341:8: note: candidate: void CXXConstructExprMatcher::match(const clang::CXXConstructExpr*, clang::ASTContext*)
   void match(const clang::CXXConstructExpr *consdecl, ASTContext *context)
        ^~~~~
main.cpp:341:8: note:   no known conversion for argument 1 from 'const int*' to 'const clang::CXXConstructExpr*'
main.cpp:416:39: error: expected primary-expression before '->' token
   const domain::VecExpr *expr = interp->getVecExpr(consdecl);
                                       ^~
main.cpp: In member function 'virtual void VectorDeclStmtHandler::run(const clang::ast_matchers::MatchFinder::MatchResult&)':
main.cpp:439:5: error: 'declstmt' was not declared in this scope
     declstmt->dump();
     ^~~~~~~~
main.cpp:439:5: note: suggested alternative: 'decltype'
     declstmt->dump();
     ^~~~~~~~
     decltype
main.cpp:450:35: error: base operand of '->' has non-pointer type 'interp::Interpretation'
     domain::VecIdent *id = interp_->mkVecIdent(vardecl);
                                   ^~
main.cpp:471:41: error: expected primary-expression before '->' token
     const domain::VecExpr *expr = interp->getVecExpr(consdecl);
                                         ^~
main.cpp:475:12: error: base operand of '->' has non-pointer type 'interp::Interpretation'
     interp_->mkVecDef(declstmt, id, expr);
            ^~
main.cpp:446:20: warning: unused variable 'sm' [-Wunused-variable]
     SourceManager &sm = context->getSourceManager();
                    ^~
main.cpp: In member function 'virtual void MyFrontendAction::EndSourceFileAction()':
main.cpp:529:23: error: 'domain_domain' was not declared in this scope
     bool consistent = domain_domain->isConsistent();
                       ^~~~~~~~~~~~~
main.cpp: In function 'int main(int, const char**)':
main.cpp:548:10: error: base operand of '->' has non-pointer type 'interp::Interpretation'
   interp_->addSpace("S1");
          ^~
main.cpp:549:10: error: base operand of '->' has non-pointer type 'interp::Interpretation'
   interp_->addSpace("S2");
          ^~
In file included from Domain.h:9:0,
                 from Checker.h:4,
                 from Domain.cpp:3:
Coords.h: In constructor 'coords::VecDef::VecDef(ast::VecDef*, const coords::VecIdent*, const coords::VecExpr*)':
Coords.h:254:18: warning: 'coords::VecDef::be_' will be initialized after [-Wreorder]
   const VecExpr *be_;
                  ^~~
Coords.h:241:64: warning:   base 'coords::VecExpr' [-Wreorder]
       : declStmt_(declStmt), bv_(bv), be_(be), VecExpr(declStmt) {}
                                                                ^
Coords.h:240:3: warning:   when initialized here [-Wreorder]
   VecDef(const ast::VecDef *declStmt, const coords::VecIdent *bv, const coords::VecExpr *be)
   ^~~~~~
Domain.cpp: In member function 'std::__cxx11::string domain::VecIdent::getName() const':
Domain.cpp:16:85: error: 'const class coords::VecIdent' has no member named 'getVarDecl'
     std::cerr << "VecIdent::getName(): vardecl_  addr is " << std::hex << vardecl_->getVarDecl() << "\n";
                                                                                     ^~~~~~~~~~
Domain.cpp: At global scope:
Domain.cpp:26:60: error: no 'const domain::VecExpr& domain::VecVecAddExpr::getVecVecAddExprArgL()' member function declared in class 'domain::VecVecAddExpr'
 const domain::VecExpr &VecVecAddExpr::getVecVecAddExprArgL()
                                                            ^
Domain.cpp:31:60: error: no 'const domain::VecExpr& domain::VecVecAddExpr::getVecVecAddExprArgR()' member function declared in class 'domain::VecVecAddExpr'
 const domain::VecExpr &VecVecAddExpr::getVecVecAddExprArgR()
                                                            ^
Domain.cpp:76:18: error: prototype for 'domain::VecExpr* domain::Domain::addVecVarExpr(domain::Space&, const coords::VecVarExpr*)' does not match any in class 'domain::Domain'
 domain::VecExpr *Domain::addVecVarExpr(Space &s, const coords::VecVarExpr *ast)
                  ^~~~~~
In file included from Checker.h:4:0,
                 from Domain.cpp:3:
Domain.h:180:11: error: candidate is: domain::VecExpr& domain::Domain::addVecVarExpr(domain::Space&, const coords::VecVarExpr*)
  VecExpr& addVecVarExpr(Space& s, const coords::VecVarExpr* ast);
           ^~~~~~~~~~~~~
Domain.cpp: In member function 'domain::VecExpr* domain::Domain::addVecVecAddExpr(domain::Space&, coords::VecVecAddExpr*, domain::VecExpr*, domain::VecExpr*)':
Domain.cpp:94:13: error: cannot convert 'domain::VecExpr' to 'domain::VecExpr*' in return
     return *be;
             ^~
Domain.cpp: At global scope:
Domain.cpp:123:27: error: 'domain::Vector* domain::Domain::addVector' is not a static data member of 'class domain::Domain'
 Vector* Domain::addVector(coords Vector* coords) {
                           ^~~~~~
Domain.cpp:123:34: error: expected primary-expression before 'Vector'
 Vector* Domain::addVector(coords Vector* coords) {
                                  ^~~~~~
Domain.cpp:131:30: error: no 'void domain::Domain::dumpIdentifiers()' member function declared in class 'domain::Domain'
 void Domain::dumpIdentifiers()
                              ^
Makefile:110: recipe for target '../build/ASTMatcher' failed
make: *** [../build/ASTMatcher] Error 1
