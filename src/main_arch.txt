Receives            Main                                            Interp              Matches                 Calls
--------
                    MyASTConsumer                                                       VectorDeclStmtHandler
CXXConstructExpr    VectorDeclStmtHandler                           Ident, Def          CXXConstructExprMatcher
CXXConstructExpr    HandlerForCXXConstructLitExpr                   mkVector
DeclRefExpr         HandlerForCXXMemberCallExprRight_DeclRefExpr    mkVecVarExpr 
CXXMemberCallExpr   HandlerForCXXAddMemberCall                      <delegate>                                  handleMemberCallExpr
CXXMemberCallExpr   handleMemberCallExpr                            mkVecVecAddExpr                             handle_member_expr_of_add_call
                                                                                                                handle_arg0_of_add_call
CXXConstructExpr    HandlerForCXXConstructAddExpr                   mkVector                                    handleMemberCallExpr (child)

                    CXXMemberCallExprArg0Matcher                                        DeclRef|Member  
Expr                handle_arg0_of_add_call (recurse)                                   CXXMemberCallExprArg0Matcher
                    CXXMemberCallExprMemberExprMatcher (paren or)                       DeclRef|Member
Expr                handle_member_expr_of_add_call (Expr*)                              CXXMemberCallExprMemberExprMatcher
                    CXXConstructExprMatcher (|lit | add)
CXXConstructExpr    handleCXXDeclStmt                                                   CXXConstructExprMatcher
                                                                                        vector declStmt


MyASTConsumer: {
    foreach d: DeclStmt, match d. using VectorDeclStmtHandler
}

VectorDeclStmtHandler (d : DeclStmt)  {
    id = d.VarDecl
    interp->mkVecIdent(i);
    consdecl = d.CXXConstructExpr
    match ctor using CXXConstructExprMatcher.match(consdecl);
    retrieve expr : domain::VecExpr;
    interp->mkVecDef(d, id, expr)
}

CXXConstructExprMatcher.match(consdecl)
    match consdecl with 
    | cxxConstructExpr litExpr := HandlerForCXXConstructLitExpr
    | cxxConstructExpr addExpr := HandlerForCXXConstructAddExpr
}

HandlerForCXXConstructLitExpr(CXXConstructExpr litast) {
    interp->mkVector(l, context)
}

HandlerForCXXConstructAddExpr (CXXConstructExpr e) {
    CXXMemberCallExpr vec_vec_add_ctor_ast = e.membercall
    domain::VecExpr mce = handleMemberCallExpr(vec_vec_add_ctor_ast)
    interp->mkVector(vec_vec_add_ctor_ast, mce)
}

handleMemberCallExpr(CXXMemberCallExpr *mce_ast) {
    clang::Expr* mem_ast = mce_ast.implicitArg
    clang::Expr* arg_ast = mce_ast.arg[0]
    dom::VecExpr* left = handle_member_expr_of_add_call(mem_ast)
    dom::VecExpr* right = handle_arg0_of_add_call(arg_ast)
    handle_arg0_of_add_call(arg_ast)
    interp->mkVecVecAddExpr(ast, left_br, right_br);
}

domain::VecExpr *handle_member_expr_of_add_call(clang::Expr *ast) {
    match ast with CXXMemberCallExprMemberExprMatcher.match(ast)
    return interp_->getVecExpr(memexpr)   
}

// problem here, parens
CXXMemberCallExprMemberExprMatcher(Expr* ast) {
    match ast with
    | d: declRefExpr().bind("DeclRefExpr")                                     := HandlerForCXXMemberCallExprRight_DeclRefExpr(d)
    | p: parenExpr(hasDescendant(cxxMemberCallExpr().bind("MemberCallExpr")))  := HandlerForCXXAddMemberCall(p.cxxMemberCallExpr)
    | m: cxxMemberCallExpr().bind("MemberCallExpr")                            := HandlerForCXXAddMemberCall(m)
}

HandlerForCXXMemberCallExprRight_DeclRefExpr(ast: declRefExpr) {
    interp->mkVecVarExpr(declRefExpr)
}

// coupling by side effect
HandlerForCXXAddMemberCall(ast: cxxMemberCallExpr) {
    handleMemberCallExpr(ast); // recurse above
}

domain::VecExpr *handle_arg0_of_add_call(clang::Expr *ast) {
    match ast with CXXMemberCallExprArg0Matcher.match(ast)
    // return value now in interp
    return interp_->getVecExpr(ast)
}

CXXMemberCallExprArg0Matcher(Expr* ast) {
    match as with 
    | declRefExpr().bind("DeclRefExpr") := HandlerForCXXMemberCallExprRight_DeclRefExpr // ?? Variable as argument
    | cxxMemberCallExpr().bind("MemberCallExpr") := HandlerForCXXAddMemberCall
}

END